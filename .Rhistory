iltestPC<-predict(preProc,iltest[,-1])
pred<-predict(modelFit,iltestPC)
confusionMatrix(iltest$diagnosis,pred)
pred
summary(pred)
iltest$diagnosis
str(pred)
df<-data.frame("Diagnosis"=iltest$diagnosis,"Prediction"=pred)
df
58/82
60/82
preProc<-preProcess(iltrain[,-1],method="pca",thresh=0.99)
iltrainPC<-predict(preProc,iltrain[,-1])
modelFit<-train(iltrain$diagnosis~.,method="glm",data=iltrainPC)
iltestPC<-predict(preProc,iltest[,-1])
pred<-predict(modelFit,iltestPC)
confusionMatrix(iltest$diagnosis,pred)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
str(segmentationOriginal)
training=segmentationOriginal[,segmentationOriginal$Case=="Train"]
training=segmentationOriginalsegmentationOriginal$Case=="Train",]
training=segmentationOriginal[segmentationOriginal$Case=="Train",]
str(training)
1009/2016
1009/2019
testing=segmentationOriginal[segmentationOriginal$Case=="Test",]
str(testing)
names(training)
set.seed(125)
training<-training[,-c(1,2)]
names(training)
testing<-testing[,-c(1,2)]
set.seed(125)
modFit<-train(Class~.,method="rpart",data=training)
modFit$finalModel
plot(modFit$finalModel,uniform=TRUE,main="Classification Tree")
dev.off()
plot(modFit$finalModel,uniform=TRUE,main="Classification Tree")
test(modFit$finalModel,use.n=TRUE,all=TRUE,cex=.8)
text(modFit$finalModel,use.n=TRUE,all=TRUE,cex=.8)
install.pacakages("rattle")
install.packages("rattle")
library(rattle)
library(rattle)
fancyRpartPlot(modFit$finalModel)
predict(modFit,testing)
head(training[,101])
head(training[,c(1,101)])
install.packages("pgmm")
library(pgmm)
data(olive)
str(olive)
table(olive$Region)
table(olive$Area)
olive<-olive[,-1]
newdata=as.data.frame(t(colMeans(olive)))
str(newdata)
newdata
?tree
install.pacakages("tree")
install.packages("tree")
library(tree)
?tree
olivetree<-tree(Area~.,data=olive)
olivetree
plot(olivetree)
text(olivetree,use.n=TRUE,all=TRUE,cex=.8)
predict(olivetree,newdata)
install.packages("ElemStatLearn")
library(ElemStatLearn)
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train=sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA=SAheart[train,]
testSA=SAheart[-train,]
str(SAheart)
dim(SAheart)
dim(SAheart)[1]
str(trainSA)
table(trainSA$chd)
?train
library(caret)
?train
train
set.seed(13234)
modFit<-train(chd~age+alcohol+obesity+typea+tobacco+ldl,method="glm",family="binomial",data=trainSA)
str(trainSA)
modFit
modFit$results
plot(modFit)
missClass=function(values,prediction){sum(((prediction>0.5)*1)!=values )/length(values)}
missClass(trainSA,predict(modFit,trainSA)
missClass=function(values,prediction){sum(((prediction>0.5)*1)!=values )/length(values)}
missClass(trainSA,predict(modFit,trainSA))
missClass(testSA,predict(modFit,testSA))
length(trainSA)
length(testSA)
str(trainSA)
204.9*10/231
trainSA$chd<-factor(trainSA$chd)
str(trainSA)
modFit<-train(chd~age+alcohol+obesity+typea+tobacco+ldl,method="glm",family="binomial",data=trainSA)
modFit
testSA$chd<-factor(testSA$chd)
str(testSA$chd)
predtest<-predict(modFit,testSA)
predtest
predtest-testSA$chd
predtest==testSA$chd
sum(predtest==testSA$chd)
length(predtest)
231-159
72/231
predtrain=predict(modFit,trainSA)
sum(predtrain==trainSA$chd)
231-168
63/231
missClass=function(values,prediction){sum(((prediction>0.5)*1)!=values )/length(values)}
missClass(trainSA,predict(modFit,trainSA))
missClass(as.numeric(trainSA$chd),as.numeric(predict(modFit,trainSA)))
missClass(as.numeric(testSA$chd),as.numeric(predict(modFit,testSA)))
set.seed(13234)
modFit<-train(chd~age+alcohol+obesity+typea+tobacco+ldl,method="glm",family="binomial",data=trainSA)
missClass(as.numeric(trainSA$chd),as.numeric(predict(modFit,trainSA)))
missClass(as.numeric(testSA),as.numeric(predict(modFit,testSA)))
missClass(as.numeric(testSA$chd),as.numeric(predict(modFit,testSA)))
data(vowel.train)
data(vowel.test)
str(vowel.test)
vowel.test$y
str(vowel.train)
vowel.train$y<-factor(vowel.train$y)
str(vowel.train)
vowel.test$y<-factor(vowel.test$y)
str(vowel.test)
modFit<-train(y~.,method="rf",data=vowel.train)
modFit
?varImp
varImp(modFit)
set.seed(33833)
modFit<-train(y~.,method="rf",data=vowel.train)
varImp(modFit)
data(vowel.train)
data(vowel.test)
vowel.train$y<-factor(vowel.train$y)
vowel.test$y<-factor(vowel.test$y)
set.seed(33833)
modFit<-train(y~.,method="rf",data=vowel.train)
varImp(modFit)
modFit
plot(modFit)
library(caret)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y<-factor(vowel.train$y)
vowel.test$y<-factor(vowel.test$y)
set.seed(33833)
modFit1<-train(y~.,method="rf",data=vowel.train)
modFit1
pred1<-predict(modFit1,vowel.test)
confusionMatrix(pred1,vowel.test)
confusionMatrix(pred1,vowel.test$y)
set.seed(33833)
modFit2<-train(y~.,method="gbm",data=vowel.train)
modFit2
pred2<-predict(modFit2,vowel.test)
confusionMatrix(pred2,vowel.test$y)
mod1acc<-sum(pred1==vowel.test$y)/length(pred1)
mod1acc
mod2acc<-sum(pred2==vowel.test$y)/length(pred2)
mod2acc
pred1
sum(pred1==pred2)
330/length(vowel.test$y)
str(vowel.test)
0.6147*528
0.5108*528
sum(pred1==pred2 & pred1==vowel.test$y)
209/528
sum(pred1==pred2 & pred2==vowel.test$y)
209/330
sum(pred1==pred2 & pred2==vowel.test$y)/sum(pred1==pred2)
modFit1$finalModel
str(training)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]] training = adData[ inTrain,]
testing = adData[-inTrain,]
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
str(training)
mrf<-train(diagnosis~.,method="rf",data=training)
mrf
mgbm<-train(diagnosis~.,method="gbm",data=training)
mlda<-train(diagnosis~.,method="lda",data=training)
mgbm
mlda
predrf<-predict(mrf,training)
predrf<-predict(mrf,testing)
confusionMatrix((predrf,testing$diagnosis))
confusionMatrix(predrf,testing$diagnosis)
predgbm<-predict(mgbm,testing)
confusionMatrix(predgbm,testing$diagnosis)
predlda<-predict(mlda,testing)
confusionMatrix(predlda,testing$diagnosis)
set.seed(62433)
mrf<-train(diagnosis~.,method="rf",data=training)
mgbm<-train(diagnosis~.,method="gbm",data=training)
mlda<-train(diagnosis~.,method="lda",data=training)
predrf<-predict(mrf,testing)
predgbm<-predict(mgbm,testing)
predlda<-predict(lda,testing)
confusionMatrix(predrf,testing$diagnosis)
confusionMatrix(predgbm,testing$diagnosis)
confusionMatrix(predlda,testing$diagnosis)
plot(predrf,predgbm)
plot(pred1,pred2)
plot(pred1,pred2,colour=y,data=vowel.test)
plot(pred1,pred2,colour=vowel.test$y,data=vowel.test)
predDF<-data.frame(predrf,predgbm,predlda,training$diagnosis)
mall<-train(diagnosis~.,method="rf",data=predDF)
predall<-predict(mall,predDF)
str(predrf)
length(predrf)
predDF<-data.frame(predrf,predgbm,predlda,testing$diagnosis)
mall<-train(diagnosis~.,method="rf",data=predDF)
predall<-predict(mall,predDF)
confusionMatrix(mall,predDF$diagnosis)
length(testing$diagnosis)
length(predgbm)
predDF
predDF<-data.frame(predrf,predgbm,predlda,diagnosis=testing$diagnosis)
mall<-train(diagnosis~.,method="rf",data=predDF)
predall<-predict(mall,predDF)
confusionMatrix(mall,predDF$diagnosis)
mall<-train(diagnosis~.,method="rf",data=predDF)
predall<-predict(mall,predDF)
confusionMatrix(predmall,predDF$diagnosis)
confusionMatrix(predall,predDF$diagnosis)
predDF
sqrt(sum((predrf-testing$diagnosis)^2))
sum(predrf==testing$diagnosis)
sum(predrf==testing$diagnosis)/length(predrf)
sum(predgbm==testing$diagnosis)/length(predgbm)
sum(predlda==testing$diagnosis)/length(predlda)
sum(predall==testing$diagnosis)/length(predall)
predrf_tr<-predict(mrf,training)
predgbm_tr<-predict(mgbm,training)
predlda_tr<-predict(lda,training)
predDFtr<-data.frame(predrf_tr,predgbm_tr,predlda_tr,diagnosis=training$diagnosis)
malltr<-train(diagnosis~.,method="rf",data=predDFtr)
predrf_tr<-predict(mrf,training)
predgbm_tr<-predict(mgbm,training)
predlda_tr<-predict(mlda,training)
predDFtr<-data.frame(predrf_tr,predgbm_tr,predlda_tr,diagnosis=training$diagnosis)
malltr<-train(diagnosis~.,method="rf",data=predDFtr)
predall2<-predict(malltr,predDF)
predall2
sum(predall2==testing$diagnosis)
str(predDF)
sum(predall2==predDF$diagnosis)
predDF<-data.frame(rf=predrf,gbm=predgbm,lda=predlda,diagnosis=testing$diagnosis)
predDFtr<-data.frame(rf=predrf_tr,gbm=predgbm_tr,lda=predlda_tr,diagnosis=training$diagnosis)
malltr<-train(diagnosis~.,method="rf",data=predDFtr)
predall2<-predict(malltr,predDF)
predall2
sum(predall2==predDF$diagnosis)
68/82
set.seed(62433)
mrf<-train(diagnosis~.,method="rf",data=training)
mgbm<-train(diagnosis~.,method="gbm",data=training)
mlda<-train(diagnosis~.,method="lda",data=training)
predrf<-predict(mrf,testing)
predgbm<-predict(mgbm,testing)
predlda<-predict(lda,testing)
predDF<-data.frame(rf=predrf,gbm=predgbm,lda=predlda,diagnosis=testing$diagnosis)
predrf_tr<-predict(mrf,training)
predgbm_tr<-predict(mgbm,training)
predlda_tr<-predict(mlda,training)
predDFtr<-data.frame(rf=predrf_tr,gbm=predgbm_tr,lda=predlda_tr,diagnosis=training$diagnosis)
malltr<-train(diagnosis~.,method="rf",data=predDFtr)
predall<-predict(malltr,predDF)
sum(predrf==testing$diagnosis)/length(predrf)
sum(predgbm==testing$diagnosis)/length(predgbm)
sum(predlda==testing$diagnosis)/length(predlda)
sum(predall==predDF$diagnosis)/length(predall)
?plot.enet
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
?plot.enet
??plot.enet
install.packages("elasticnet")
library(elasticnet)
?plot.enet
str(training)
set.seed(233)
lasso <- train(CompressiveStrength ~.,method='lasso',data=training)
lasso
plot.enet(lasso)
plot.enet(lasso$finalModel)
predict.enet(lasso$finalModel, type='coefficients', s=lasso$bestTune$fraction, mode='fraction')
lasso.pred <- predict(lasso, testing)
sqrt(mean(lasso.pred - testing$CompressiveStrength)^2)
plot(lasso$finalModel)
?plot.enet
plot(lasso$finalModel,xvar="penalty")
plot.enet(lasso$finalModel,xvar="penalty")
dat = read.csv(download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/gaData.csv"))
dat = read.csv(download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/gaData.csv",destfile="temp"))
str9dat
str(dat)
getwd()
setwd("./Dekstop")
setwd("./Desktop")
setwd("./DataSci")
getwd()
setwd("./ML")
getwd()
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/gaData.csv", destfile = "gaData.csv")
dat<-read.csv("gaData.csv")
str(dat)
head(dat)
tail(dat)
plot(date,visitsTUmblr,data=dat)
plot(date,visitsTumblr,data=dat)
plot(dat$date,dat$visitsTumblr)
library(lubridate)
install.packages("lubridate")
library(lubridate)
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
?ts
trtain
tstrain
str(training)
str(testing)
plot(tstrain)
tstest = ts(testing$visitsTumblr)
plot(tstest)
install.packages("forecast")
library(forecast)
?bats
batmod<-bats(tstrain)
batmod
batmod$fitted.values
plot(tstrain,batmod$fitted.values)
batpred<-predict(batmod,tstest)
f<-forecast(batmod,30,level=c(95))
f
str(testing)
head(testing)
tail(testing)
f<-forecast(batmod,235,level=c(95))
plot(tstest,f)
length(f)
length(f$mean)
plot(tstest,f$mean)
tstest
plot(tstest)
plot(f$mean)
f
sum(tstest>f$lower & tstest<f$upper)/length(tstest)
remdata = dat[year(dat$date) > 2011,]
tsrem = ts(remdata$visitsTumblr)
model = bats(tstrain)
pred <- forecast(model, h=length(tsrem),level=c(95))
accuracy(pred, remdata$visitsTumblr)
acc = sum(remdata$visitsTumblr <= pred$upper) / nrow(remdata)
plot(model$fitted.values)
plot(tstrain,model$fitted.values)
plot(pred$mean)
install.packages("e1071")
library(e1071)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
library(e1071)
model<-svm(CompressiveSrength~.,data=concrete)
model<-svm(CompressiveStrength~.,data=concrete)
model
pred<-predict(model,testing)
pred
str(pred)
model<-svm(CompressiveStrength~.,data=training)
pred<-predict(model,testing)
plot(testing$CompressiveStrength,pred)
mse=sum((pred-testing$CompressiveStrength)^2)/length(pred)
rmse=sqrt(mse)
rmse
summary(pred)
?predict
rmse(pred,testing$CompressiveStrength)
install.package("metrics")
install.packages("metrics")
install.packages("Metrics")
library(Metrics)
rmse(pred,testing$CompressiveStrength)
getwd()
setwd("/Project")
setwd("./Project")
getwd()
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv", destfile = "pmltrng.csv")
training=read.csv("pmltrng.csv")
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv", destfile = "pmltest.csv")
testing=read.csv("pmltest.csv")
dim(training)
dim(testing)
names(training)
str(training$classe)
head(classe)
head(training$classe)
tail(training$classe)
table(training$classe)
4*38
head(training[,1:7])
table(training$user_name)
head(training$cvtd_timestamp)
tail(training$cvtd_timestamp)
table(training$cvtd_timestamp)
table(training$new_window)
table(training$num_window)
str(testing)
names(testing)
str(testing$problem_id)
testing$problem_id
19622*160
sum(training[,]=="NA")
sum(is.na(training))
sum(is.na(testing))
20*160
1200/3200
1287472/3139520
1-0.41
training[1,]
sum(is.na(training[,8]))/length(training[,8])
sum(is.na(training[,8]))
sum(is.na(training[,9]))/length(training[,9])
sum(is.na(training[,20]))/length(training[,20])
sum(is.na(training$max_yaw_belt))
sum(is.na(training$max_picth_belt))
sum(is.na(training$max_picth_belt))/length(training$max_picth_belt)
sum(is.na(training[,19]))
t<-lapply(1:160, function (x) sum(is.na(training[,x])/length(training[,x])))
t
1287472/19216
sum(t!=0)
which(t!=0)
tr<-training[,c(which(t!=0))]
dim(tr)
tr<-training[,-c(which(t!=0))]
dim(tr)
sum(is.na(tr))
names(training[,c(which(t==0))])
names(training[,c(which(t!=0))])
tt<-lapply(1:160, function (x) sum(is.na(testing[,x])/length(testing[,x])))
tt
which(tt!=0)
length(tt)
length(which(tt!=0))
sum(names(training)==names(testing))
names(testing[,which(tt!=0)])
names(training[,which(tt!=0)])
names(training)
nanames<-names(training[,which(tt!=0)])
nanames
grep("belt",nanaes)
grep("belt",nanames)
grep("arm",nanames)
grep("dumbbell",nanames)
grep("forearm",nanames)
str(training)
table(training$skewness_roll_dumbbell)
str(testing)
newtrn<-training[,-c(which(tt!=0))]
dim(newtrn)
names(newtrn)
newtrn<-newtrn[,-c(1:7)]
names(newtrn)
sum(is.na(newtrn))
newtst<-testing[,-c(which(tt!=0))]
dim(newtst)
names(newtst)
newtst<-newtst[,-c(1:7)]
names(newtst)
sum(names(newtrn)!-names(newtst))
sum(names(newtrn)!=names(newtst))
dm(newtrn)
dim(newtrn)
inTrain = createDataPartition(newtrn$classe, p = 3/4)[[1]]
newtrntrn = newtrn[ inTrain,]
newtrnval = newtrn[-inTrain,]
dim(newtrntrn)
dim(newtrnval)
mod1<-train(classe~.,method="rf",data=newtrntrn)
